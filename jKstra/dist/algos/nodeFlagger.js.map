{"version":3,"sources":["../../src/algos/nodeFlagger.js"],"names":[],"mappings":";;;;;;;;;;;AAEI,oBAAY,KAAZ,EAAmB,OAAnB,EAA4B;;;AACxB,aAAK,KAAL,GAAa,KAAb,CADwB;AAExB,aAAK,OAAL,GAAe,OAAf,CAFwB;KAA5B;;;;mCAKW,OAAO;;;AACd,iBAAK,KAAL,CAAW,aAAX,CAAyB,aAAK;AAC1B,uBAAO,EAAE,MAAK,OAAL,CAAT,CAD0B;aAAL,CAAzB,CADc;;;;iCAMT,GAAG;AACR,mBAAO,EAAE,KAAK,OAAL,CAAF,IAAmB,EAAnB,CADC;;;;iCAIH,GAAG,OAAO;AACf,gBAAI,CAAC,EAAE,cAAF,CAAiB,KAAK,OAAL,CAAlB,EAAiC;AACjC,kBAAE,KAAK,OAAL,CAAF,GAAkB,EAAlB,CADiC;aAArC;AAGA,iBAAK,IAAI,GAAJ,IAAW,KAAhB,EAAuB;AACnB,kBAAE,KAAK,OAAL,CAAF,CAAgB,GAAhB,IAAuB,MAAM,GAAN,CAAvB,CADmB;aAAvB","file":"nodeFlagger.js","sourcesContent":["\nexport default class {\n    constructor(graph, flagKey) {\n        this.graph = graph;\n        this.flagKey = flagKey;\n    }\n\n    clearFlags(graph) {\n        this.graph.forEachVertex(v => {\n            delete v[this.flagKey];\n        });\n    }\n\n    getFlags(v) {\n        return v[this.flagKey] || {};\n    }\n\n    setFlags(v, flags) {\n        if (!v.hasOwnProperty(this.flagKey)) {\n            v[this.flagKey] = {};\n        }\n        for (let key in flags) {\n            v[this.flagKey][key] = flags[key];\n        }\n    }\n}\n"]}