{"version":3,"sources":["../../src/core/Graph.js"],"names":[],"mappings":"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","file":"Graph.js","sourcesContent":["import { IN, OUT } from './constants.js';\nimport { propsMatch } from './utils.js';\n\nclass Graph {\n    constructor() {\n        this.vertices = [];\n        this.edges = [];\n    }\n\n    get vertexCount() {\n        return this.vertices.length;\n    }\n\n    get edgeCount() {\n        return this.edges.length;\n    }\n\n    addVertex(data) {\n        const vertex = {\n            _in: [],\n            _out: [],\n            data: data\n        };\n        this.vertices.push(vertex);\n        return vertex;\n    }\n\n    addEdge(from, to, data) {\n        const edge = {\n            from: from,\n            to: to,\n            data: data || {}\n        };\n        from._out.push(edge);\n        to._in.push(edge);\n        this.edges.push(edge);\n        return edge;\n    }\n\n    /**\n    Shortcut to add an edge and its reverse,\n    sharing the same data.\n    */\n    addEdgePair(a, b, data) {\n        return [\n            this.addEdge(a, b, data),\n            this.addEdge(b, a, data)\n        ];\n    }\n\n    removeEdge(edge) {\n        const index = this.edges.indexOf(edge);\n        if(index !== -1) {\n            // remove from extremity this.vertices first\n            edge.from._out.splice(edge.from._out.indexOf(edge), 1);\n            edge.to._in.splice(edge.to._in.indexOf(edge), 1);\n            this.edges.splice(index, 1);\n        }\n    }\n\n    removeVertex(vertex) {\n        const index = this.vertices.indexOf(vertex);\n        if(index !== -1) {\n            // remove all incident this.edges first\n            const edgesToRemove = vertex._in.concat(vertex._out);\n            for(let i = 0; i < edgesToRemove.length; i++) {\n                this.removeEdge(edgesToRemove[i]);\n            }\n            this.vertices.splice(index, 1);\n        }\n    }\n\n    outEdges(vertex, filter) {\n        return this.incidentEdges(vertex, OUT, filter);\n    }\n\n    inEdges(vertex, filter) {\n        return this.incidentEdges(vertex, IN, filter);\n    }\n\n    /**\n    Returns all this.edges incident to a vertex, in one direction (outgoing or incoming),\n    optionnaly filtered by a given function.\n    */\n    incidentEdges(vertex, direction, filter) {\n        if (!filter) {\n            return direction ? vertex._out : vertex._in;\n        }\n        const edges = direction ? vertex._out : vertex._in;\n        return edges.filter(filter);\n    }\n\n    vertex(props) {\n        const vertices = this.vertices;\n        for (let i = 0, l = vertices.length; i < l; i++) {\n            if (propsMatch(vertices[i].data, props)) {\n                return vertices[i];\n            }\n        }\n        return null;\n    }\n\n    edge(props) {\n        const edges = this.edges;\n        for (let i = 0, l = edges.length; i < l; i++) {\n            if (propsMatch(edges[i].data, props)) {\n                return edges[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n    Perform an action on each vertex of the graph\n    */\n    forEachVertex(action) {\n        this.vertices.forEach(v => action(v));\n    }\n\n    /**\n    Perform an action on each edge of the graph\n    */\n    forEachEdge(action) {\n        this.edges.forEach(e => action(e));\n    }\n};\n\nexport default Graph;\n"]}